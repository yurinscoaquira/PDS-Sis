{"version":3,"file":"ConsoleLogStream-Cf8MQNMN.js","sources":["../../../../../../node_modules/linkify-html/dist/linkify-html.mjs","../../../../frontend/pipeline-console-view/pipeline-console/main/Ansi.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLine.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLogStream.tsx"],"sourcesContent":["import { Options, tokenize as tokenize$1 } from 'linkifyjs';\n\n/**\n * generated from https://raw.githubusercontent.com/w3c/html/26b5126f96f736f796b9e29718138919dd513744/entities.json\n * do not edit\n */\nvar HTML5NamedCharRefs = {\n  // We don't need the complete named character reference because linkifyHtml\n  // does not modify the escape sequences. We do need &nbsp; so that\n  // whitespace is parsed properly. Other types of whitespace should already\n  // be accounted for. &gt; &lt; and &quot; are also frequently relevant ones\n  amp: \"&\",\n  gt: \">\",\n  lt: \"<\",\n  nbsp: \"Â \",\n  quot: \"\\\"\"\n};\nvar HEXCHARCODE = /^#[xX]([A-Fa-f0-9]+)$/;\nvar CHARCODE = /^#([0-9]+)$/;\nvar NAMED = /^([A-Za-z0-9]+)$/;\nvar EntityParser = /** @class */function () {\n  function EntityParser(named) {\n    this.named = named;\n  }\n  EntityParser.prototype.parse = function (entity) {\n    if (!entity) {\n      return;\n    }\n    var matches = entity.match(HEXCHARCODE);\n    if (matches) {\n      return String.fromCharCode(parseInt(matches[1], 16));\n    }\n    matches = entity.match(CHARCODE);\n    if (matches) {\n      return String.fromCharCode(parseInt(matches[1], 10));\n    }\n    matches = entity.match(NAMED);\n    if (matches) {\n      return this.named[matches[1]] || \"&\" + matches[1] + \";\";\n    }\n  };\n  return EntityParser;\n}();\nvar WSP = /[\\t\\n\\f ]/;\nvar ALPHA = /[A-Za-z]/;\nvar CRLF = /\\r\\n?/g;\nfunction isSpace(char) {\n  return WSP.test(char);\n}\nfunction isAlpha(char) {\n  return ALPHA.test(char);\n}\nfunction preprocessInput(input) {\n  return input.replace(CRLF, '\\n');\n}\nvar EventedTokenizer = /** @class */function () {\n  function EventedTokenizer(delegate, entityParser, mode) {\n    if (mode === void 0) {\n      mode = 'precompile';\n    }\n    this.delegate = delegate;\n    this.entityParser = entityParser;\n    this.mode = mode;\n    this.state = \"beforeData\" /* beforeData */;\n    this.line = -1;\n    this.column = -1;\n    this.input = '';\n    this.index = -1;\n    this.tagNameBuffer = '';\n    this.states = {\n      beforeData: function () {\n        var char = this.peek();\n        if (char === '<' && !this.isIgnoredEndTag()) {\n          this.transitionTo(\"tagOpen\" /* tagOpen */);\n          this.markTagStart();\n          this.consume();\n        } else {\n          if (this.mode === 'precompile' && char === '\\n') {\n            var tag = this.tagNameBuffer.toLowerCase();\n            if (tag === 'pre' || tag === 'textarea') {\n              this.consume();\n            }\n          }\n          this.transitionTo(\"data\" /* data */);\n          this.delegate.beginData();\n        }\n      },\n      data: function () {\n        var char = this.peek();\n        var tag = this.tagNameBuffer;\n        if (char === '<' && !this.isIgnoredEndTag()) {\n          this.delegate.finishData();\n          this.transitionTo(\"tagOpen\" /* tagOpen */);\n          this.markTagStart();\n          this.consume();\n        } else if (char === '&' && tag !== 'script' && tag !== 'style') {\n          this.consume();\n          this.delegate.appendToData(this.consumeCharRef() || '&');\n        } else {\n          this.consume();\n          this.delegate.appendToData(char);\n        }\n      },\n      tagOpen: function () {\n        var char = this.consume();\n        if (char === '!') {\n          this.transitionTo(\"markupDeclarationOpen\" /* markupDeclarationOpen */);\n        } else if (char === '/') {\n          this.transitionTo(\"endTagOpen\" /* endTagOpen */);\n        } else if (char === '@' || char === ':' || isAlpha(char)) {\n          this.transitionTo(\"tagName\" /* tagName */);\n          this.tagNameBuffer = '';\n          this.delegate.beginStartTag();\n          this.appendToTagName(char);\n        }\n      },\n      markupDeclarationOpen: function () {\n        var char = this.consume();\n        if (char === '-' && this.peek() === '-') {\n          this.consume();\n          this.transitionTo(\"commentStart\" /* commentStart */);\n          this.delegate.beginComment();\n        } else {\n          var maybeDoctype = char.toUpperCase() + this.input.substring(this.index, this.index + 6).toUpperCase();\n          if (maybeDoctype === 'DOCTYPE') {\n            this.consume();\n            this.consume();\n            this.consume();\n            this.consume();\n            this.consume();\n            this.consume();\n            this.transitionTo(\"doctype\" /* doctype */);\n            if (this.delegate.beginDoctype) this.delegate.beginDoctype();\n          }\n        }\n      },\n      doctype: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          this.transitionTo(\"beforeDoctypeName\" /* beforeDoctypeName */);\n        }\n      },\n      beforeDoctypeName: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          return;\n        } else {\n          this.transitionTo(\"doctypeName\" /* doctypeName */);\n          if (this.delegate.appendToDoctypeName) this.delegate.appendToDoctypeName(char.toLowerCase());\n        }\n      },\n      doctypeName: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          this.transitionTo(\"afterDoctypeName\" /* afterDoctypeName */);\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          if (this.delegate.appendToDoctypeName) this.delegate.appendToDoctypeName(char.toLowerCase());\n        }\n      },\n      afterDoctypeName: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          return;\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          var nextSixChars = char.toUpperCase() + this.input.substring(this.index, this.index + 5).toUpperCase();\n          var isPublic = nextSixChars.toUpperCase() === 'PUBLIC';\n          var isSystem = nextSixChars.toUpperCase() === 'SYSTEM';\n          if (isPublic || isSystem) {\n            this.consume();\n            this.consume();\n            this.consume();\n            this.consume();\n            this.consume();\n            this.consume();\n          }\n          if (isPublic) {\n            this.transitionTo(\"afterDoctypePublicKeyword\" /* afterDoctypePublicKeyword */);\n          } else if (isSystem) {\n            this.transitionTo(\"afterDoctypeSystemKeyword\" /* afterDoctypeSystemKeyword */);\n          }\n        }\n      },\n      afterDoctypePublicKeyword: function () {\n        var char = this.peek();\n        if (isSpace(char)) {\n          this.transitionTo(\"beforeDoctypePublicIdentifier\" /* beforeDoctypePublicIdentifier */);\n          this.consume();\n        } else if (char === '\"') {\n          this.transitionTo(\"doctypePublicIdentifierDoubleQuoted\" /* doctypePublicIdentifierDoubleQuoted */);\n          this.consume();\n        } else if (char === \"'\") {\n          this.transitionTo(\"doctypePublicIdentifierSingleQuoted\" /* doctypePublicIdentifierSingleQuoted */);\n          this.consume();\n        } else if (char === '>') {\n          this.consume();\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        }\n      },\n      doctypePublicIdentifierDoubleQuoted: function () {\n        var char = this.consume();\n        if (char === '\"') {\n          this.transitionTo(\"afterDoctypePublicIdentifier\" /* afterDoctypePublicIdentifier */);\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          if (this.delegate.appendToDoctypePublicIdentifier) this.delegate.appendToDoctypePublicIdentifier(char);\n        }\n      },\n      doctypePublicIdentifierSingleQuoted: function () {\n        var char = this.consume();\n        if (char === \"'\") {\n          this.transitionTo(\"afterDoctypePublicIdentifier\" /* afterDoctypePublicIdentifier */);\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          if (this.delegate.appendToDoctypePublicIdentifier) this.delegate.appendToDoctypePublicIdentifier(char);\n        }\n      },\n      afterDoctypePublicIdentifier: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          this.transitionTo(\"betweenDoctypePublicAndSystemIdentifiers\" /* betweenDoctypePublicAndSystemIdentifiers */);\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else if (char === '\"') {\n          this.transitionTo(\"doctypeSystemIdentifierDoubleQuoted\" /* doctypeSystemIdentifierDoubleQuoted */);\n        } else if (char === \"'\") {\n          this.transitionTo(\"doctypeSystemIdentifierSingleQuoted\" /* doctypeSystemIdentifierSingleQuoted */);\n        }\n      },\n      betweenDoctypePublicAndSystemIdentifiers: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          return;\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else if (char === '\"') {\n          this.transitionTo(\"doctypeSystemIdentifierDoubleQuoted\" /* doctypeSystemIdentifierDoubleQuoted */);\n        } else if (char === \"'\") {\n          this.transitionTo(\"doctypeSystemIdentifierSingleQuoted\" /* doctypeSystemIdentifierSingleQuoted */);\n        }\n      },\n      doctypeSystemIdentifierDoubleQuoted: function () {\n        var char = this.consume();\n        if (char === '\"') {\n          this.transitionTo(\"afterDoctypeSystemIdentifier\" /* afterDoctypeSystemIdentifier */);\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          if (this.delegate.appendToDoctypeSystemIdentifier) this.delegate.appendToDoctypeSystemIdentifier(char);\n        }\n      },\n      doctypeSystemIdentifierSingleQuoted: function () {\n        var char = this.consume();\n        if (char === \"'\") {\n          this.transitionTo(\"afterDoctypeSystemIdentifier\" /* afterDoctypeSystemIdentifier */);\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          if (this.delegate.appendToDoctypeSystemIdentifier) this.delegate.appendToDoctypeSystemIdentifier(char);\n        }\n      },\n      afterDoctypeSystemIdentifier: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          return;\n        } else if (char === '>') {\n          if (this.delegate.endDoctype) this.delegate.endDoctype();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        }\n      },\n      commentStart: function () {\n        var char = this.consume();\n        if (char === '-' && this.peek() === '-') {\n          this.transitionTo(\"commentStartDash\" /* commentStartDash */);\n        } else if (char === '>') {\n          this.delegate.finishComment();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.delegate.appendToCommentData(char);\n          this.transitionTo(\"comment\" /* comment */);\n        }\n      },\n      commentStartDash: function () {\n        var char = this.consume();\n        if (char === '-') {\n          this.transitionTo(\"commentEnd\" /* commentEnd */);\n        } else if (char === '>') {\n          this.delegate.finishComment();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.delegate.appendToCommentData('-');\n          this.transitionTo(\"comment\" /* comment */);\n        }\n      },\n      comment: function () {\n        var char = this.consume();\n        if (char === '-') {\n          this.transitionTo(\"commentEndDash\" /* commentEndDash */);\n        } else {\n          this.delegate.appendToCommentData(char);\n        }\n      },\n      commentEndDash: function () {\n        var char = this.consume();\n        if (char === '-' && this.peek() === '-') {\n          this.delegate.appendToCommentData(char);\n        } else if (char === '-') {\n          this.transitionTo(\"commentEnd\" /* commentEnd */);\n        } else {\n          this.delegate.appendToCommentData('-' + char);\n          this.transitionTo(\"comment\" /* comment */);\n        }\n      },\n      commentEnd: function () {\n        var char = this.consume();\n        if (char === '>') {\n          this.delegate.finishComment();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.delegate.appendToCommentData('--' + char);\n          this.transitionTo(\"comment\" /* comment */);\n        }\n      },\n      tagName: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          this.transitionTo(\"beforeAttributeName\" /* beforeAttributeName */);\n        } else if (char === '/') {\n          this.transitionTo(\"selfClosingStartTag\" /* selfClosingStartTag */);\n        } else if (char === '>') {\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.appendToTagName(char);\n        }\n      },\n      endTagName: function () {\n        var char = this.consume();\n        if (isSpace(char)) {\n          this.transitionTo(\"beforeAttributeName\" /* beforeAttributeName */);\n          this.tagNameBuffer = '';\n        } else if (char === '/') {\n          this.transitionTo(\"selfClosingStartTag\" /* selfClosingStartTag */);\n          this.tagNameBuffer = '';\n        } else if (char === '>') {\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n          this.tagNameBuffer = '';\n        } else {\n          this.appendToTagName(char);\n        }\n      },\n      beforeAttributeName: function () {\n        var char = this.peek();\n        if (isSpace(char)) {\n          this.consume();\n          return;\n        } else if (char === '/') {\n          this.transitionTo(\"selfClosingStartTag\" /* selfClosingStartTag */);\n          this.consume();\n        } else if (char === '>') {\n          this.consume();\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else if (char === '=') {\n          this.delegate.reportSyntaxError('attribute name cannot start with equals sign');\n          this.transitionTo(\"attributeName\" /* attributeName */);\n          this.delegate.beginAttribute();\n          this.consume();\n          this.delegate.appendToAttributeName(char);\n        } else {\n          this.transitionTo(\"attributeName\" /* attributeName */);\n          this.delegate.beginAttribute();\n        }\n      },\n      attributeName: function () {\n        var char = this.peek();\n        if (isSpace(char)) {\n          this.transitionTo(\"afterAttributeName\" /* afterAttributeName */);\n          this.consume();\n        } else if (char === '/') {\n          this.delegate.beginAttributeValue(false);\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.transitionTo(\"selfClosingStartTag\" /* selfClosingStartTag */);\n        } else if (char === '=') {\n          this.transitionTo(\"beforeAttributeValue\" /* beforeAttributeValue */);\n          this.consume();\n        } else if (char === '>') {\n          this.delegate.beginAttributeValue(false);\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else if (char === '\"' || char === \"'\" || char === '<') {\n          this.delegate.reportSyntaxError(char + ' is not a valid character within attribute names');\n          this.consume();\n          this.delegate.appendToAttributeName(char);\n        } else {\n          this.consume();\n          this.delegate.appendToAttributeName(char);\n        }\n      },\n      afterAttributeName: function () {\n        var char = this.peek();\n        if (isSpace(char)) {\n          this.consume();\n          return;\n        } else if (char === '/') {\n          this.delegate.beginAttributeValue(false);\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.transitionTo(\"selfClosingStartTag\" /* selfClosingStartTag */);\n        } else if (char === '=') {\n          this.consume();\n          this.transitionTo(\"beforeAttributeValue\" /* beforeAttributeValue */);\n        } else if (char === '>') {\n          this.delegate.beginAttributeValue(false);\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.delegate.beginAttributeValue(false);\n          this.delegate.finishAttributeValue();\n          this.transitionTo(\"attributeName\" /* attributeName */);\n          this.delegate.beginAttribute();\n          this.consume();\n          this.delegate.appendToAttributeName(char);\n        }\n      },\n      beforeAttributeValue: function () {\n        var char = this.peek();\n        if (isSpace(char)) {\n          this.consume();\n        } else if (char === '\"') {\n          this.transitionTo(\"attributeValueDoubleQuoted\" /* attributeValueDoubleQuoted */);\n          this.delegate.beginAttributeValue(true);\n          this.consume();\n        } else if (char === \"'\") {\n          this.transitionTo(\"attributeValueSingleQuoted\" /* attributeValueSingleQuoted */);\n          this.delegate.beginAttributeValue(true);\n          this.consume();\n        } else if (char === '>') {\n          this.delegate.beginAttributeValue(false);\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.transitionTo(\"attributeValueUnquoted\" /* attributeValueUnquoted */);\n          this.delegate.beginAttributeValue(false);\n          this.consume();\n          this.delegate.appendToAttributeValue(char);\n        }\n      },\n      attributeValueDoubleQuoted: function () {\n        var char = this.consume();\n        if (char === '\"') {\n          this.delegate.finishAttributeValue();\n          this.transitionTo(\"afterAttributeValueQuoted\" /* afterAttributeValueQuoted */);\n        } else if (char === '&') {\n          this.delegate.appendToAttributeValue(this.consumeCharRef() || '&');\n        } else {\n          this.delegate.appendToAttributeValue(char);\n        }\n      },\n      attributeValueSingleQuoted: function () {\n        var char = this.consume();\n        if (char === \"'\") {\n          this.delegate.finishAttributeValue();\n          this.transitionTo(\"afterAttributeValueQuoted\" /* afterAttributeValueQuoted */);\n        } else if (char === '&') {\n          this.delegate.appendToAttributeValue(this.consumeCharRef() || '&');\n        } else {\n          this.delegate.appendToAttributeValue(char);\n        }\n      },\n      attributeValueUnquoted: function () {\n        var char = this.peek();\n        if (isSpace(char)) {\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.transitionTo(\"beforeAttributeName\" /* beforeAttributeName */);\n        } else if (char === '/') {\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.transitionTo(\"selfClosingStartTag\" /* selfClosingStartTag */);\n        } else if (char === '&') {\n          this.consume();\n          this.delegate.appendToAttributeValue(this.consumeCharRef() || '&');\n        } else if (char === '>') {\n          this.delegate.finishAttributeValue();\n          this.consume();\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.consume();\n          this.delegate.appendToAttributeValue(char);\n        }\n      },\n      afterAttributeValueQuoted: function () {\n        var char = this.peek();\n        if (isSpace(char)) {\n          this.consume();\n          this.transitionTo(\"beforeAttributeName\" /* beforeAttributeName */);\n        } else if (char === '/') {\n          this.consume();\n          this.transitionTo(\"selfClosingStartTag\" /* selfClosingStartTag */);\n        } else if (char === '>') {\n          this.consume();\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.transitionTo(\"beforeAttributeName\" /* beforeAttributeName */);\n        }\n      },\n      selfClosingStartTag: function () {\n        var char = this.peek();\n        if (char === '>') {\n          this.consume();\n          this.delegate.markTagAsSelfClosing();\n          this.delegate.finishTag();\n          this.transitionTo(\"beforeData\" /* beforeData */);\n        } else {\n          this.transitionTo(\"beforeAttributeName\" /* beforeAttributeName */);\n        }\n      },\n      endTagOpen: function () {\n        var char = this.consume();\n        if (char === '@' || char === ':' || isAlpha(char)) {\n          this.transitionTo(\"endTagName\" /* endTagName */);\n          this.tagNameBuffer = '';\n          this.delegate.beginEndTag();\n          this.appendToTagName(char);\n        }\n      }\n    };\n    this.reset();\n  }\n  EventedTokenizer.prototype.reset = function () {\n    this.transitionTo(\"beforeData\" /* beforeData */);\n    this.input = '';\n    this.tagNameBuffer = '';\n    this.index = 0;\n    this.line = 1;\n    this.column = 0;\n    this.delegate.reset();\n  };\n  EventedTokenizer.prototype.transitionTo = function (state) {\n    this.state = state;\n  };\n  EventedTokenizer.prototype.tokenize = function (input) {\n    this.reset();\n    this.tokenizePart(input);\n    this.tokenizeEOF();\n  };\n  EventedTokenizer.prototype.tokenizePart = function (input) {\n    this.input += preprocessInput(input);\n    while (this.index < this.input.length) {\n      var handler = this.states[this.state];\n      if (handler !== undefined) {\n        handler.call(this);\n      } else {\n        throw new Error(\"unhandled state \" + this.state);\n      }\n    }\n  };\n  EventedTokenizer.prototype.tokenizeEOF = function () {\n    this.flushData();\n  };\n  EventedTokenizer.prototype.flushData = function () {\n    if (this.state === 'data') {\n      this.delegate.finishData();\n      this.transitionTo(\"beforeData\" /* beforeData */);\n    }\n  };\n  EventedTokenizer.prototype.peek = function () {\n    return this.input.charAt(this.index);\n  };\n  EventedTokenizer.prototype.consume = function () {\n    var char = this.peek();\n    this.index++;\n    if (char === '\\n') {\n      this.line++;\n      this.column = 0;\n    } else {\n      this.column++;\n    }\n    return char;\n  };\n  EventedTokenizer.prototype.consumeCharRef = function () {\n    var endIndex = this.input.indexOf(';', this.index);\n    if (endIndex === -1) {\n      return;\n    }\n    var entity = this.input.slice(this.index, endIndex);\n    var chars = this.entityParser.parse(entity);\n    if (chars) {\n      var count = entity.length;\n      // consume the entity chars\n      while (count) {\n        this.consume();\n        count--;\n      }\n      // consume the `;`\n      this.consume();\n      return chars;\n    }\n  };\n  EventedTokenizer.prototype.markTagStart = function () {\n    this.delegate.tagOpen();\n  };\n  EventedTokenizer.prototype.appendToTagName = function (char) {\n    this.tagNameBuffer += char;\n    this.delegate.appendToTagName(char);\n  };\n  EventedTokenizer.prototype.isIgnoredEndTag = function () {\n    var tag = this.tagNameBuffer;\n    return tag === 'title' && this.input.substring(this.index, this.index + 8) !== '</title>' || tag === 'style' && this.input.substring(this.index, this.index + 8) !== '</style>' || tag === 'script' && this.input.substring(this.index, this.index + 9) !== '</script>';\n  };\n  return EventedTokenizer;\n}();\nvar Tokenizer = /** @class */function () {\n  function Tokenizer(entityParser, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.options = options;\n    this.token = null;\n    this.startLine = 1;\n    this.startColumn = 0;\n    this.tokens = [];\n    this.tokenizer = new EventedTokenizer(this, entityParser, options.mode);\n    this._currentAttribute = undefined;\n  }\n  Tokenizer.prototype.tokenize = function (input) {\n    this.tokens = [];\n    this.tokenizer.tokenize(input);\n    return this.tokens;\n  };\n  Tokenizer.prototype.tokenizePart = function (input) {\n    this.tokens = [];\n    this.tokenizer.tokenizePart(input);\n    return this.tokens;\n  };\n  Tokenizer.prototype.tokenizeEOF = function () {\n    this.tokens = [];\n    this.tokenizer.tokenizeEOF();\n    return this.tokens[0];\n  };\n  Tokenizer.prototype.reset = function () {\n    this.token = null;\n    this.startLine = 1;\n    this.startColumn = 0;\n  };\n  Tokenizer.prototype.current = function () {\n    var token = this.token;\n    if (token === null) {\n      throw new Error('token was unexpectedly null');\n    }\n    if (arguments.length === 0) {\n      return token;\n    }\n    for (var i = 0; i < arguments.length; i++) {\n      if (token.type === arguments[i]) {\n        return token;\n      }\n    }\n    throw new Error(\"token type was unexpectedly \" + token.type);\n  };\n  Tokenizer.prototype.push = function (token) {\n    this.token = token;\n    this.tokens.push(token);\n  };\n  Tokenizer.prototype.currentAttribute = function () {\n    return this._currentAttribute;\n  };\n  Tokenizer.prototype.addLocInfo = function () {\n    if (this.options.loc) {\n      this.current().loc = {\n        start: {\n          line: this.startLine,\n          column: this.startColumn\n        },\n        end: {\n          line: this.tokenizer.line,\n          column: this.tokenizer.column\n        }\n      };\n    }\n    this.startLine = this.tokenizer.line;\n    this.startColumn = this.tokenizer.column;\n  };\n  // Data\n  Tokenizer.prototype.beginDoctype = function () {\n    this.push({\n      type: \"Doctype\" /* Doctype */,\n      name: ''\n    });\n  };\n  Tokenizer.prototype.appendToDoctypeName = function (char) {\n    this.current(\"Doctype\" /* Doctype */).name += char;\n  };\n  Tokenizer.prototype.appendToDoctypePublicIdentifier = function (char) {\n    var doctype = this.current(\"Doctype\" /* Doctype */);\n    if (doctype.publicIdentifier === undefined) {\n      doctype.publicIdentifier = char;\n    } else {\n      doctype.publicIdentifier += char;\n    }\n  };\n  Tokenizer.prototype.appendToDoctypeSystemIdentifier = function (char) {\n    var doctype = this.current(\"Doctype\" /* Doctype */);\n    if (doctype.systemIdentifier === undefined) {\n      doctype.systemIdentifier = char;\n    } else {\n      doctype.systemIdentifier += char;\n    }\n  };\n  Tokenizer.prototype.endDoctype = function () {\n    this.addLocInfo();\n  };\n  Tokenizer.prototype.beginData = function () {\n    this.push({\n      type: \"Chars\" /* Chars */,\n      chars: ''\n    });\n  };\n  Tokenizer.prototype.appendToData = function (char) {\n    this.current(\"Chars\" /* Chars */).chars += char;\n  };\n  Tokenizer.prototype.finishData = function () {\n    this.addLocInfo();\n  };\n  // Comment\n  Tokenizer.prototype.beginComment = function () {\n    this.push({\n      type: \"Comment\" /* Comment */,\n      chars: ''\n    });\n  };\n  Tokenizer.prototype.appendToCommentData = function (char) {\n    this.current(\"Comment\" /* Comment */).chars += char;\n  };\n  Tokenizer.prototype.finishComment = function () {\n    this.addLocInfo();\n  };\n  // Tags - basic\n  Tokenizer.prototype.tagOpen = function () {};\n  Tokenizer.prototype.beginStartTag = function () {\n    this.push({\n      type: \"StartTag\" /* StartTag */,\n      tagName: '',\n      attributes: [],\n      selfClosing: false\n    });\n  };\n  Tokenizer.prototype.beginEndTag = function () {\n    this.push({\n      type: \"EndTag\" /* EndTag */,\n      tagName: ''\n    });\n  };\n  Tokenizer.prototype.finishTag = function () {\n    this.addLocInfo();\n  };\n  Tokenizer.prototype.markTagAsSelfClosing = function () {\n    this.current(\"StartTag\" /* StartTag */).selfClosing = true;\n  };\n  // Tags - name\n  Tokenizer.prototype.appendToTagName = function (char) {\n    this.current(\"StartTag\" /* StartTag */, \"EndTag\" /* EndTag */).tagName += char;\n  };\n  // Tags - attributes\n  Tokenizer.prototype.beginAttribute = function () {\n    this._currentAttribute = ['', '', false];\n  };\n  Tokenizer.prototype.appendToAttributeName = function (char) {\n    this.currentAttribute()[0] += char;\n  };\n  Tokenizer.prototype.beginAttributeValue = function (isQuoted) {\n    this.currentAttribute()[2] = isQuoted;\n  };\n  Tokenizer.prototype.appendToAttributeValue = function (char) {\n    this.currentAttribute()[1] += char;\n  };\n  Tokenizer.prototype.finishAttributeValue = function () {\n    this.current(\"StartTag\" /* StartTag */).attributes.push(this._currentAttribute);\n  };\n  Tokenizer.prototype.reportSyntaxError = function (message) {\n    this.current().syntaxError = message;\n  };\n  return Tokenizer;\n}();\nfunction tokenize(input, options) {\n  var tokenizer = new Tokenizer(new EntityParser(HTML5NamedCharRefs), options);\n  return tokenizer.tokenize(input);\n}\n\nconst LinkifyResult = 'LinkifyResult';\nconst StartTag = 'StartTag';\nconst EndTag = 'EndTag';\nconst Chars = 'Chars';\nconst Comment = 'Comment';\nconst Doctype = 'Doctype';\n\n/**\n * @param {string} str html string to link\n * @param {import('linkifyjs').Opts} [opts] linkify options\n * @returns {string} resulting string\n */\nfunction linkifyHtml(str, opts = {}) {\n  // `tokens` and `token` in this section refer to tokens generated by the\n  // HTML parser, not linkify's parser\n  const tokens = tokenize(str);\n  const linkifiedTokens = [];\n  const linkified = [];\n  const options = new Options(opts, defaultRender);\n\n  // Linkify the tokens given by the parser\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.type === StartTag) {\n      linkifiedTokens.push(token);\n\n      // Ignore all the contents of ignored tags\n      const tagName = token.tagName.toUpperCase();\n      const isIgnored = tagName === 'A' || options.ignoreTags.indexOf(tagName) >= 0;\n      if (!isIgnored) {\n        continue;\n      }\n      let preskipLen = linkifiedTokens.length;\n      skipTagTokens(tagName, tokens, ++i, linkifiedTokens);\n      i += linkifiedTokens.length - preskipLen - 1;\n    } else if (token.type !== Chars) {\n      // Skip this token, it's not important\n      linkifiedTokens.push(token);\n    } else {\n      // Valid text token, linkify it!\n      const linkifedChars = linkifyChars(token.chars, options);\n      linkifiedTokens.push.apply(linkifiedTokens, linkifedChars);\n    }\n  }\n\n  // Convert the tokens back into a string\n  for (let i = 0; i < linkifiedTokens.length; i++) {\n    const token = linkifiedTokens[i];\n    switch (token.type) {\n      case LinkifyResult:\n        linkified.push(token.rendered);\n        break;\n      case StartTag:\n        {\n          let link = '<' + token.tagName;\n          if (token.attributes.length > 0) {\n            link += ' ' + attributeArrayToStrings(token.attributes).join(' ');\n          }\n          if (token.selfClosing) {\n            link += ' /';\n          }\n          link += '>';\n          linkified.push(link);\n          break;\n        }\n      case EndTag:\n        linkified.push(`</${token.tagName}>`);\n        break;\n      case Chars:\n        linkified.push(escapeText(token.chars));\n        break;\n      case Comment:\n        linkified.push(`<!--${escapeText(token.chars)}-->`);\n        break;\n      case Doctype:\n        {\n          let doctype = `<!DOCTYPE ${token.name}`;\n          if (token.publicIdentifier) {\n            doctype += ` PUBLIC \"${token.publicIdentifier}\"`;\n          }\n          if (token.systemIdentifier) {\n            doctype += ` \"${token.systemIdentifier}\"`;\n          }\n          doctype += '>';\n          linkified.push(doctype);\n          break;\n        }\n    }\n  }\n  return linkified.join('');\n}\n\n/**\n\t`tokens` and `token` in this section referes to tokens returned by\n\t`linkify.tokenize`. `linkified` will contain HTML Parser-style tokens\n\t@param {string}\n\t@param {import('linkifyjs').Options}\n*/\nfunction linkifyChars(str, options) {\n  const tokens = tokenize$1(str);\n  const result = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.t === 'nl' && options.get('nl2br')) {\n      result.push({\n        type: StartTag,\n        tagName: 'br',\n        attributes: [],\n        selfClosing: true\n      });\n    } else if (!token.isLink || !options.check(token)) {\n      result.push({\n        type: Chars,\n        chars: token.toString()\n      });\n    } else {\n      result.push({\n        type: LinkifyResult,\n        rendered: options.render(token)\n      });\n    }\n  }\n  return result;\n}\n\n/**\n\tReturns a list of tokens skipped until the closing tag of tagName.\n\n\t* `tagName` is the closing tag which will prompt us to stop skipping\n\t* `tokens` is the array of tokens generated by HTML5Tokenizer which\n\t* `i` is the index immediately after the opening tag to skip\n\t* `skippedTokens` is an array which skipped tokens are being pushed into\n\n\tCaveats\n\n\t* Assumes that i is the first token after the given opening tagName\n\t* The closing tag will be skipped, but nothing after it\n\t* Will track whether there is a nested tag of the same type\n*/\nfunction skipTagTokens(tagName, tokens, i, skippedTokens) {\n  // number of tokens of this type on the [fictional] stack\n  let stackCount = 1;\n  while (i < tokens.length && stackCount > 0) {\n    let token = tokens[i];\n    if (token.type === StartTag && token.tagName.toUpperCase() === tagName) {\n      // Nested tag of the same type, \"add to stack\"\n      stackCount++;\n    } else if (token.type === EndTag && token.tagName.toUpperCase() === tagName) {\n      // Closing tag\n      stackCount--;\n    }\n    skippedTokens.push(token);\n    i++;\n  }\n\n  // Note that if stackCount > 0 here, the HTML is probably invalid\n  return skippedTokens;\n}\nfunction defaultRender({\n  tagName,\n  attributes,\n  content\n}) {\n  return `<${tagName} ${attributesToString(attributes)}>${escapeText(content)}</${tagName}>`;\n}\nfunction escapeText(text) {\n  return text.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nfunction escapeAttr(attr) {\n  return attr.replace(/\"/g, '&quot;');\n}\nfunction attributesToString(attributes) {\n  const result = [];\n  for (const attr in attributes) {\n    const val = attributes[attr] + '';\n    result.push(`${attr}=\"${escapeAttr(val)}\"`);\n  }\n  return result.join(' ');\n}\nfunction attributeArrayToStrings(attrs) {\n  const attrStrs = [];\n  for (let i = 0; i < attrs.length; i++) {\n    const name = attrs[i][0];\n    const value = attrs[i][1] + '';\n    attrStrs.push(`${name}=\"${escapeAttr(value)}\"`);\n  }\n  return attrStrs;\n}\n\nexport { linkifyHtml as default };\n","export interface Result {\n  isSelectGraphicRendition?: boolean;\n  escapeCode?: string; // input\n  setFG?: number | false; // 0-7 if a foreground color is specified\n  setBG?: number | false; // 0-7 if a background color is specified\n  resetFG?: boolean; // true if contains a reset back to default foreground\n  resetBG?: boolean; // true if contains a reset back to default background\n  setBold?: boolean; // true if contains a bold font style\n  setFaint?: boolean; // true if contains a faint font style\n  setItalic?: boolean; // true if contains an italic font style\n  setUnderline?: boolean; // true if contains an underline font style\n  setStrikeThrough?: boolean; // true if contains a strike-through font style\n}\n\n/**\n * Parse an isolated escape code, looking for \"SelectGraphicsRendition\" codes specifically.\n *\n * Result:\n * ```\n * // Supported code\n * {\n *     isSelectGraphicRendition: true,\n *     escapeCode: string, // input\n *     setFG: integer | false, // 0-7 if a foreground color is specified\n *     setBG: integer | false, // 0-7 if a background color is specified\n *     resetFG: bool, // true if contains a reset back to default foreground\n *     resetBG: bool // true if contains a reset back to default background\n *     setBold: boolean, // true if contains a bold font style\n *     setFaint: boolean; // true if contains a faint font style\n *     setItalic: boolean; // true if contains an italic font style\n *     setUnderline: boolean, // true if contains an underline font style\n *     setStrikeThrough: boolean, // true if contains a strike-through font style\n * }\n *\n * // Unsupported or malformed code:\n * {\n *     isSelectGraphicRendition: false,\n *     escapeCode: string // input\n * }\n * ```\n */\nexport function parseEscapeCode(escapeCode: string): Result {\n  // eslint-disable-next-line no-control-regex\n  const graphicsPattern = /^\\u001b\\[([;0-9]*)m$/; // We only care about SGR codes\n\n  const result: Result = {\n    isSelectGraphicRendition: false, // True when is a color / font command\n    escapeCode,\n  };\n\n  const match = graphicsPattern.exec(escapeCode);\n\n  if (match) {\n    result.isSelectGraphicRendition = true;\n    result.setFG = false;\n    result.setBG = false;\n    result.resetFG = false;\n    result.resetBG = false;\n\n    // Convert param string to array<int> with length > 1\n    const params = (match[1] || \"\")\n      .split(\";\")\n      .map((str) => parseInt(str || \"0\"));\n\n    // Now go through the ints, decode them into bg/fg info\n    for (const num of params) {\n      if (num >= 30 && num <= 37) {\n        result.setFG = num - 30; // Normal FG set\n      } else if (num >= 40 && num <= 47) {\n        result.setBG = num - 40; // Normal BG set\n      } else if (num >= 90 && num <= 97) {\n        result.setFG = num - 90 + 8; // Bright FG set\n      } else if (num >= 100 && num <= 107) {\n        result.setBG = num - 100 + 8; // Bright BG set\n      } else if (num === 1) {\n        result.setBold = true;\n      } else if (num === 2) {\n        result.setFaint = true;\n      } else if (num === 22) {\n        result.setBold = false;\n        result.setFaint = false;\n      } else if (num === 3) {\n        result.setItalic = true;\n      } else if (num === 23) {\n        result.setItalic = false;\n      } else if (num === 4) {\n        result.setUnderline = true;\n      } else if (num === 24) {\n        result.setUnderline = false;\n      } else if (num === 9) {\n        result.setStrikeThrough = true;\n      } else if (num === 29) {\n        result.setStrikeThrough = false;\n      } else {\n        if (num === 39 || num === 0) {\n          result.resetFG = true;\n          result.setFG = false;\n        }\n\n        if (num === 49 || num === 0) {\n          result.resetBG = true;\n          result.setBG = false;\n        }\n\n        // ANSI code 0 should reset all formatting attributes\n        if (num === 0) {\n          result.setBold = false;\n          result.setFaint = false;\n          result.setItalic = false;\n          result.setUnderline = false;\n          result.setStrikeThrough = false;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Break up a string into an array of plain strings and escape codes. Returns [input] if no codes present.\n */\nexport function tokenizeANSIString(input?: string): string[] | Result[] {\n  if (typeof input !== \"string\") {\n    return [];\n  }\n\n  const len = input.length;\n\n  if (len === 0) {\n    return [];\n  }\n\n  /*\n    loopCounter         - Where should the next loop start looping for escape codes.\n    escapeCodeIndex     - The index in the string of the next ANSI escape code or -1.\n    parsedPointer       - The parse pointer how far in the string have we parsed.\n                          This will === loopCounter unless there are commented ANSI escape characters.\n    commentStartIndex   - The start index of the next comment block, or -1.\n    commentEndIndex     - The end index of the next comment block, or -1.\n  */\n  let loopCounter = 0;\n  let escapeCodeIndex = 0;\n  let parsedPointer = 0;\n  // comment start\n  let commentStartIndex = 0;\n  // comment end\n  let commentEndIndex = 0;\n  const result: string[] | Result[] = [];\n\n  while (loopCounter < len) {\n    //--------------------------------------------------------------------------\n    //  Find next escape code\n    escapeCodeIndex = input.indexOf(\"\\x1b\", loopCounter);\n\n    if (escapeCodeIndex === -1) {\n      // No more escape codes\n      break;\n    }\n\n    // Check if escape code is commented\n    commentStartIndex = input.indexOf(\"<!--\", loopCounter);\n    commentEndIndex = input.indexOf(\"-->\", commentStartIndex);\n    if (commentEndIndex !== -1) {\n      commentEndIndex += 3;\n    }\n    if (\n      escapeCodeIndex > commentStartIndex &&\n      escapeCodeIndex < commentEndIndex\n    ) {\n      // Skip past the comment\n      loopCounter = commentEndIndex;\n      continue;\n    }\n\n    //--------------------------------------------------------------------------\n    //  Capture any text between the start pointer and the escape code\n\n    if (escapeCodeIndex > loopCounter) {\n      result.push(input.substring(loopCounter, escapeCodeIndex));\n      loopCounter = escapeCodeIndex; // Advance our start pointer to the beginning of the escape code\n    }\n\n    //--------------------------------------------------------------------------\n    //  Find the end of the escape code (a char from 64 - 126 indicating command)\n\n    escapeCodeIndex += 2; // Skip past ESC and '['\n\n    let code = input.charCodeAt(escapeCodeIndex);\n    while (escapeCodeIndex < len && (code < 64 || code > 126)) {\n      escapeCodeIndex++;\n      code = input.charCodeAt(escapeCodeIndex);\n    }\n\n    //--------------------------------------------------------------------------\n    //  Create token for the escape code\n\n    // TODO fix type checking\n    const parsedEscapeCode: any = parseEscapeCode(\n      input.substring(loopCounter, escapeCodeIndex + 1),\n    );\n    result.push(parsedEscapeCode);\n\n    //--------------------------------------------------------------------------\n    //  Keep looking in the rest of the string\n\n    loopCounter = escapeCodeIndex + 1;\n    // Move parsedPointer as we have processes the text to this point.\n    parsedPointer = loopCounter;\n  }\n\n  if (parsedPointer < len) {\n    result.push(input.substr(parsedPointer));\n  }\n\n  return result;\n}\n\n/**\n * Takes an array of string snippets and parsed escape codes produced bv tokenizeANSIString, and creates\n * an array of strings and spans with classNames for attributes.\n */\nexport function makeReactChildren(\n  tokenizedInput: string[] | Result[],\n  key: string,\n) {\n  const result = [];\n  let currentState: Result = {\n    setFG: false,\n    setBG: false,\n    setBold: false,\n    setFaint: false,\n    setItalic: false,\n    setUnderline: false,\n    setStrikeThrough: false,\n  };\n\n  for (let i = 0; i < tokenizedInput.length; i++) {\n    const codeOrString = tokenizedInput[i];\n    if (typeof codeOrString === \"string\") {\n      // Need to output a <span> or plain text if there's no interesting current state\n      if (\n        !currentState.setFG &&\n        !currentState.setBG &&\n        !currentState.setBold &&\n        !currentState.setFaint &&\n        !currentState.setItalic &&\n        !currentState.setUnderline &&\n        !currentState.setStrikeThrough\n      ) {\n        result.push(\n          <div\n            dangerouslySetInnerHTML={{ __html: codeOrString }}\n            key={`${key}-${i}`}\n          />,\n        );\n      } else {\n        const classNames = [];\n\n        if (typeof currentState.setFG === \"number\") {\n          classNames.push(`ansi-fg-${currentState.setFG}`);\n        }\n        if (typeof currentState.setBG === \"number\") {\n          classNames.push(`ansi-bg-${currentState.setBG}`);\n        }\n        if (currentState.setBold) {\n          classNames.push(\"ansi-bold\");\n        }\n        if (currentState.setFaint) {\n          classNames.push(\"ansi-faint\");\n        }\n        if (currentState.setItalic) {\n          classNames.push(\"ansi-italic\");\n        }\n        if (currentState.setUnderline) {\n          classNames.push(\"ansi-underline\");\n        }\n        if (currentState.setStrikeThrough) {\n          classNames.push(\"ansi-strikethrough\");\n        }\n\n        result.push(\n          <span className={classNames.join(\" \")}>{codeOrString}</span>,\n        );\n      }\n    } else if (codeOrString.isSelectGraphicRendition) {\n      // Update the current FG / BG colors for the next text span\n      const nextState = { ...currentState };\n\n      if (codeOrString.resetFG) {\n        nextState.setFG = false;\n      }\n      if (codeOrString.resetBG) {\n        nextState.setBG = false;\n      }\n\n      if (typeof codeOrString.setFG === \"number\") {\n        nextState.setFG = codeOrString.setFG;\n      }\n      if (typeof codeOrString.setBG === \"number\") {\n        nextState.setBG = codeOrString.setBG;\n      }\n\n      if (codeOrString.setBold !== undefined) {\n        nextState.setBold = codeOrString.setBold;\n      }\n\n      if (codeOrString.setFaint !== undefined) {\n        nextState.setFaint = codeOrString.setFaint;\n      }\n\n      if (codeOrString.setItalic !== undefined) {\n        nextState.setItalic = codeOrString.setItalic;\n      }\n\n      if (codeOrString.setUnderline !== undefined) {\n        nextState.setUnderline = codeOrString.setUnderline;\n      }\n\n      if (codeOrString.setStrikeThrough !== undefined) {\n        nextState.setStrikeThrough = codeOrString.setStrikeThrough;\n      }\n\n      currentState = nextState;\n    }\n  }\n\n  return result;\n}\n","import linkifyHtml from \"linkify-html\";\nimport { memo } from \"react\";\n\nimport { linkifyJsOptions } from \"../../../common/utils/linkify-js.ts\";\nimport { makeReactChildren, tokenizeANSIString } from \"./Ansi.tsx\";\n\nexport interface ConsoleLineProps {\n  lineNumber: string;\n  content: string;\n  stepId: string;\n  startByte: number;\n}\n\n// Console output line\nexport const ConsoleLine = memo(function ConsoleLine(props: ConsoleLineProps) {\n  const baseURL = `?start-byte=${props.startByte}&selected-node=${props.stepId}`;\n  const id = `log-${props.stepId}-${props.lineNumber}`;\n  return (\n    <pre\n      style={{ background: \"none\", border: \"none\" }}\n      className=\"console-output-line\"\n    >\n      <div className=\"console-output-line\">\n        <a\n          className=\"console-line-number\"\n          id={id}\n          href={`${baseURL}#${id}`}\n          onClick={() => {\n            // Avoid an actual page navigation by swapping the current URL for\n            // the baseURL (query without hash) before the default \"click\"\n            // behavior (the browsers page navigation logic) runs. The\n            // effective navigation is a swap of the hash, which merely updates\n            // the style and scroll position. The page state (opened/collapsed\n            // steps and fetched logs) is retained.\n            history.replaceState({}, \"\", baseURL);\n          }}\n          style={{\n            width: Math.max(9 * String(props.lineNumber).length, 30) + \"px\",\n          }}\n        >\n          {props.lineNumber}\n        </a>\n        <div className=\"console-text\">\n          {makeReactChildren(\n            tokenizeANSIString(linkifyHtml(props.content, linkifyJsOptions)),\n            id,\n          )}\n        </div>\n      </div>\n    </pre>\n  );\n});\n","import { useEffect, useRef, useState } from \"react\";\n\nimport { ConsoleLine } from \"./ConsoleLine.tsx\";\nimport {\n  POLL_INTERVAL,\n  Result,\n  StepInfo,\n  StepLogBufferInfo,\n  TAIL_CONSOLE_LOG,\n} from \"./PipelineConsoleModel.tsx\";\n\nfunction canStickToBottom() {\n  // Avoid scrolling to the bottom when a log line is focussed.\n  return !window.location.hash.startsWith(\"#log-\");\n}\n\nexport default function ConsoleLogStream({\n  step,\n  logBuffer,\n  onMoreConsoleClick,\n  fetchExceptionText,\n}: ConsoleLogStreamProps) {\n  const appendInterval = useRef<number | null>(null);\n  const [stickToBottom, setStickToBottom] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      if (appendInterval.current) {\n        clearInterval(appendInterval.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (step.state === Result.failure) {\n      fetchExceptionText(step.id);\n    }\n  }, [step.id, step.state, fetchExceptionText]);\n\n  useEffect(() => {\n    if (stickToBottom && logBuffer.lines.length > 0 && canStickToBottom()) {\n      // Scroll to bottom of the log stream\n      if (logBuffer.lines) {\n        requestAnimationFrame(() => {\n          if (!canStickToBottom()) return;\n          const scrollTarget = document.documentElement.scrollHeight;\n          window.scrollTo({ top: scrollTarget });\n        });\n      }\n    }\n  }, [stickToBottom, logBuffer.lines]);\n\n  useEffect(() => {\n    if (!canStickToBottom()) return;\n    const handleScroll = () => {\n      if (!canStickToBottom()) {\n        window.removeEventListener(\"scroll\", handleScroll);\n        setStickToBottom(false);\n        return;\n      }\n      const scrollPosition = window.scrollY + window.innerHeight;\n      const pageHeight = document.body.scrollHeight;\n      const isAtBottom = pageHeight - scrollPosition < 300;\n\n      setStickToBottom(isAtBottom);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    const shouldRequestMoreLogs =\n      step.state === Result.running || logBuffer.endByte < 0;\n\n    if (stickToBottom && shouldRequestMoreLogs) {\n      if (!appendInterval.current) {\n        appendInterval.current = window.setInterval(() => {\n          onMoreConsoleClick(step.id, TAIL_CONSOLE_LOG);\n        }, POLL_INTERVAL);\n      }\n    } else if (appendInterval.current) {\n      clearInterval(appendInterval.current);\n      appendInterval.current = null;\n    }\n  }, [stickToBottom, step, logBuffer, onMoreConsoleClick]);\n\n  const [scrollToLogLine, setScrollToLogLine] = useState<boolean>(\n    window.location.hash.startsWith(\"#log-\"),\n  );\n  useEffect(() => {\n    if (!scrollToLogLine) return;\n    let hash = window.location.hash;\n    if (!hash.startsWith(\"#log-\")) return;\n    let [stepIdPart, lineNumberPart] = hash.slice(5).split(\"-\");\n    if (lineNumberPart && stepIdPart !== step.id) {\n      // The log line belongs to another step.\n      setScrollToLogLine(false);\n      return;\n    }\n    if (!lineNumberPart) {\n      // Backwards compatibility for links without a stepId in the hash.\n      lineNumberPart = stepIdPart;\n      stepIdPart = step.id;\n      hash = `#log-${stepIdPart}-${lineNumberPart}`;\n      location.hash = hash;\n    }\n    const element = document.getElementById(hash.slice(1));\n    if (!element) return; // Try again the next time the log lines change.\n    element.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n\n    // Toggle hash to refresh the :target css matcher of the active line.\n    location.hash = \"\";\n    location.hash = hash;\n\n    setScrollToLogLine(false);\n  }, [scrollToLogLine, step.id, logBuffer.lines]);\n\n  return (\n    <div role=\"log\">\n      {logBuffer.lines.map((content, index) => (\n        <ConsoleLine\n          key={index}\n          lineNumber={String(index)}\n          content={content}\n          stepId={step.id}\n          startByte={logBuffer.startByte}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport interface ConsoleLogStreamProps {\n  logBuffer: StepLogBufferInfo;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  fetchExceptionText: (nodeId: string) => void;\n  step: StepInfo;\n}\n"],"names":["HTML5NamedCharRefs","HEXCHARCODE","CHARCODE","NAMED","EntityParser","named","entity","matches","WSP","ALPHA","CRLF","isSpace","char","isAlpha","preprocessInput","input","EventedTokenizer","delegate","entityParser","mode","tag","maybeDoctype","nextSixChars","isPublic","isSystem","state","handler","endIndex","chars","count","Tokenizer","options","token","i","doctype","isQuoted","message","tokenize","tokenizer","LinkifyResult","StartTag","EndTag","Chars","Comment","Doctype","linkifyHtml","str","opts","tokens","linkifiedTokens","linkified","Options","defaultRender","tagName","preskipLen","skipTagTokens","linkifedChars","linkifyChars","link","attributeArrayToStrings","escapeText","tokenize$1","result","skippedTokens","stackCount","attributes","content","attributesToString","text","escapeAttr","attr","val","attrs","attrStrs","name","value","parseEscapeCode","escapeCode","graphicsPattern","match","params","num","tokenizeANSIString","len","loopCounter","escapeCodeIndex","parsedPointer","commentStartIndex","commentEndIndex","code","parsedEscapeCode","makeReactChildren","tokenizedInput","key","currentState","codeOrString","jsx","classNames","nextState","ConsoleLine","memo","props","baseURL","id","jsxs","linkifyJsOptions","canStickToBottom","ConsoleLogStream","step","logBuffer","onMoreConsoleClick","fetchExceptionText","appendInterval","useRef","stickToBottom","setStickToBottom","useState","useEffect","Result","scrollTarget","handleScroll","scrollPosition","isAtBottom","shouldRequestMoreLogs","TAIL_CONSOLE_LOG","POLL_INTERVAL","scrollToLogLine","setScrollToLogLine","hash","stepIdPart","lineNumberPart","element","index"],"mappings":"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","x_google_ignoreList":[0]}