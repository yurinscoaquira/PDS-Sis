{"version":3,"file":"multi-pipeline-graph-view-bundle.js","sources":["../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/SingleRun.tsx","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/support/startPollingRunsStatus.ts","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/MultiPipelineGraph.tsx","../../../frontend/common/components/checkbox.tsx","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/overfow-dropdown.tsx","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/settings-button.tsx","../../../frontend/multi-pipeline-graph-view/app.tsx","../../../frontend/multi-pipeline-graph-view/index.tsx"],"sourcesContent":["import \"./single-run.scss\";\n\nimport { useContext } from \"react\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport {\n  I18NContext,\n  LocalizedMessageKey,\n} from \"../../../common/i18n/index.ts\";\nimport useRunPoller from \"../../../common/tree-api.ts\";\nimport { useUserPreferences } from \"../../../common/user/user-preferences-provider.tsx\";\nimport { time, Total } from \"../../../common/utils/timings.tsx\";\nimport { PipelineGraph } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraph.tsx\";\nimport {\n  defaultLayout,\n  LayoutInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { RunInfo } from \"./MultiPipelineGraphModel.ts\";\n\nexport default function SingleRun({ run, currentJobPath }: SingleRunProps) {\n  const { run: runInfo } = useRunPoller({\n    currentRunPath: currentJobPath + run.id + \"/\",\n  });\n\n  function Changes() {\n    const messages = useContext(I18NContext);\n\n    if (run.changesCount === 0) {\n      return;\n    }\n    return (\n      <>\n        {\" - \"}\n        {messages.format(LocalizedMessageKey.changesSummary, {\n          0: run.changesCount,\n        })}\n      </>\n    );\n  }\n\n  const { showNames, showDurations } = useUserPreferences();\n\n  function getLayout() {\n    const layout: LayoutInfo = { ...defaultLayout };\n\n    if (!showNames && !showDurations) {\n      layout.nodeSpacingH = 45;\n    } else {\n      layout.nodeSpacingH = 90;\n    }\n\n    return layout;\n  }\n\n  function getCompactLayout() {\n    return !showNames && !showDurations ? \"pgv-single-run--compact\" : \"\";\n  }\n\n  return (\n    <div className={`pgv-single-run ${getCompactLayout()}`}>\n      <div>\n        <a href={currentJobPath + run.id} className=\"pgv-user-specified-text\">\n          <StatusIcon status={run.result} />\n          {run.displayName}\n          <span>\n            {time(run.timestamp)} - <Total ms={run.duration} />\n            <Changes />\n          </span>\n        </a>\n      </div>\n      <PipelineGraph stages={runInfo.stages} layout={getLayout()} collapsed />\n    </div>\n  );\n}\n\ninterface SingleRunProps {\n  run: RunInfo;\n  currentJobPath: string;\n}\n","import { RunInfo } from \"../MultiPipelineGraphModel.ts\";\n\n/**\n * Starts polling the server to retrieve pipeline status.\n * Will only stop once the run is finished.\n */\nexport default function startPollingRunsStatus(\n  pathPrefix: string,\n  onFetchSuccess: (data: Array<RunInfo>) => void,\n  onFetchError: (err: Error) => void,\n  interval = 10000,\n) {\n  const path = pathPrefix + \"multi-pipeline-graph/runs\";\n\n  async function fetchPipelineData() {\n    try {\n      const res = await fetch(path);\n      const result = await res.json();\n      onFetchSuccess(result.data);\n    } catch (err) {\n      // TODO: implement exponential backoff of the timeout interval\n      onFetchError(err);\n    } finally {\n      setTimeout(() => fetchPipelineData(), interval);\n    }\n  }\n  fetchPipelineData();\n}\n","import { useContext, useEffect, useState } from \"react\";\n\nimport {\n  I18NContext,\n  LocalizedMessageKey,\n  useLocale,\n} from \"../../../common/i18n/index.ts\";\nimport { RunInfo } from \"./MultiPipelineGraphModel.ts\";\nimport SingleRun from \"./SingleRun.tsx\";\nimport startPollingRunsStatus from \"./support/startPollingRunsStatus.ts\";\n\nexport const MultiPipelineGraph = () => {\n  const [runs, setRuns] = useState<Array<RunInfo>>([]);\n  const [poll, setPoll] = useState(false);\n\n  const rootElement = document.getElementById(\"multiple-pipeline-root\");\n  const currentJobPath = rootElement!.dataset.currentJobPath!;\n\n  useEffect(() => {\n    if (!poll) {\n      setPoll(true);\n      startPollingRunsStatus(currentJobPath, setRuns, (err) => {\n        console.log(err);\n      });\n    }\n  }, [currentJobPath, runs, poll]);\n\n  const locale = useLocale();\n\n  const groupedRuns: Record<string, RunInfo[]> = runs.reduce(\n    (acc: Record<string, RunInfo[]>, run) => {\n      const date = new Date(run.timestamp).toLocaleDateString(locale, {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      });\n\n      if (!acc[date]) {\n        acc[date] = [];\n      }\n      acc[date].push(run);\n\n      return acc;\n    },\n    {},\n  );\n\n  const messages = useContext(I18NContext);\n\n  return (\n    <>\n      {Object.keys(groupedRuns).length === 0 ? (\n        <div className=\"pgv-stages__group\">\n          <div className=\"pgv-stages__heading\">\n            {messages.format(LocalizedMessageKey.noBuilds)}\n          </div>\n        </div>\n      ) : (\n        Object.entries(groupedRuns).map(([date, runsOnDate]) => (\n          <div className={\"pgv-stages__group\"} key={date}>\n            <p className=\"pgv-stages__heading\">{date}</p>\n            {runsOnDate.map((run) => (\n              <SingleRun\n                key={run.id}\n                run={run}\n                currentJobPath={currentJobPath}\n              />\n            ))}\n          </div>\n        ))\n      )}\n    </>\n  );\n};\n","import { useId } from \"react\";\n\nexport default function Checkbox({\n  label,\n  value,\n  setValue,\n}: {\n  label: string;\n  value: boolean;\n  setValue: (e: boolean) => void;\n}) {\n  const id = useId();\n  return (\n    <div className=\"jenkins-checkbox\">\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={id}\n        checked={value}\n        onChange={(e) => setValue(e.target.checked)}\n      />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  );\n}\n","import Checkbox from \"../../../common/components/checkbox.tsx\";\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport DropdownPortal from \"../../../common/components/dropdown-portal.tsx\";\nimport { SETTINGS } from \"../../../common/components/symbols.tsx\";\nimport { LocalizedMessageKey, useMessages } from \"../../../common/i18n\";\nimport { useUserPermissions } from \"../../../common/user/user-permission-provider.tsx\";\nimport { useUserPreferences } from \"../../../common/user/user-preferences-provider.tsx\";\n\ninterface OverflowDropdownProps {\n  buttonPortal: HTMLElement;\n}\n\nexport default function OverflowDropdown({\n  buttonPortal,\n}: OverflowDropdownProps) {\n  const { showNames, setShowNames, showDurations, setShowDurations } =\n    useUserPreferences();\n  const { canConfigure } = useUserPermissions();\n  const messages = useMessages();\n  return (\n    <DropdownPortal container={buttonPortal}>\n      <Dropdown\n        className={\"jenkins-card__reveal\"}\n        items={[\n          <div className={\"pgv-dropdown-checkboxes\"} key={\"settings-options\"}>\n            <Checkbox\n              label={messages.format(LocalizedMessageKey.showNames)}\n              value={showNames}\n              setValue={setShowNames}\n            />\n            <Checkbox\n              label={messages.format(LocalizedMessageKey.showDuration)}\n              value={showDurations}\n              setValue={setShowDurations}\n            />\n          </div>,\n          canConfigure ? \"separator\" : <></>,\n          canConfigure ? (\n            {\n              text: \"Configure\",\n              icon: SETTINGS,\n              href: `../configure`,\n            }\n          ) : (\n            <></>\n          ),\n        ]}\n      />\n    </DropdownPortal>\n  );\n}\n","import \"./settings-button.scss\";\n\nimport Checkbox from \"../../../common/components/checkbox.tsx\";\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport DropdownPortal from \"../../../common/components/dropdown-portal.tsx\";\nimport { SETTINGS } from \"../../../common/components/symbols.tsx\";\nimport {\n  LocalizedMessageKey,\n  useMessages,\n} from \"../../../common/i18n/index.ts\";\nimport { useUserPreferences } from \"../../../common/user/user-preferences-provider.tsx\";\n\ntype SettingsButtonProps = {\n  buttonPortal: HTMLElement;\n};\n\nexport default function SettingsButton({ buttonPortal }: SettingsButtonProps) {\n  const messages = useMessages();\n  const { showNames, setShowNames, showDurations, setShowDurations } =\n    useUserPreferences();\n\n  return (\n    <>\n      <DropdownPortal container={buttonPortal}>\n        <Dropdown\n          tooltip={messages.format(LocalizedMessageKey.settings)}\n          icon={SETTINGS}\n          className={\"jenkins-card__reveal\"}\n          items={[\n            <div className={\"pgv-dropdown-checkboxes\"} key={\"settings-options\"}>\n              <Checkbox\n                label={messages.format(LocalizedMessageKey.showNames)}\n                value={showNames}\n                setValue={setShowNames}\n              />\n              <Checkbox\n                label={messages.format(LocalizedMessageKey.showDuration)}\n                value={showDurations}\n                setValue={setShowDurations}\n              />\n            </div>,\n          ]}\n        />\n      </DropdownPortal>\n    </>\n  );\n}\n","import \"./app.scss\";\nimport \"./multi-pipeline-graph/styles/main.scss\";\n\nimport { FunctionComponent } from \"react\";\n\nimport {\n  I18NProvider,\n  LocaleProvider,\n  ResourceBundleName,\n} from \"../common/i18n/index.ts\";\nimport { UserPermissionsProvider } from \"../common/user/user-permission-provider.tsx\";\nimport { UserPreferencesProvider } from \"../common/user/user-preferences-provider.tsx\";\nimport { MultiPipelineGraph } from \"./multi-pipeline-graph/main/MultiPipelineGraph.tsx\";\nimport OverflowDropdown from \"./multi-pipeline-graph/main/overfow-dropdown.tsx\";\nimport SettingsButton from \"./multi-pipeline-graph/main/settings-button.tsx\";\n\nconst App: FunctionComponent = () => {\n  const locale = document.getElementById(\"multiple-pipeline-root\")!.dataset\n    .userLocale!;\n  const settings = document.getElementById(\"pgv-settings\");\n  const overflow = document.getElementById(\"multiple-pipeline-overflow-root\");\n  if (!settings && !overflow) {\n    throw new Error(\"Failed to find the 'settings/overflow' element\");\n  }\n  if (settings && overflow) {\n    throw new Error(\n      \"Only one of the 'settings/overflow' elements should be defined\",\n    );\n  }\n  return (\n    <div>\n      <LocaleProvider locale={locale}>\n        <I18NProvider bundles={[ResourceBundleName.messages]}>\n          <UserPreferencesProvider>\n            {settings && <SettingsButton buttonPortal={settings} />}\n            {overflow && (\n              <UserPermissionsProvider>\n                <OverflowDropdown buttonPortal={overflow} />\n              </UserPermissionsProvider>\n            )}\n            <MultiPipelineGraph />\n          </UserPreferencesProvider>\n        </I18NProvider>\n      </LocaleProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { createRoot } from \"react-dom/client\";\n\nimport App from \"./app.tsx\";\n\nconst rootElement = document.getElementById(\"multiple-pipeline-root\");\nif (!rootElement) {\n  throw new Error(\"Failed to find the 'multiple-pipeline-root' element\");\n}\nconst root = createRoot(rootElement);\n\n// Render App\nroot.render(<App />);\n"],"names":["SingleRun","run","currentJobPath","runInfo","useRunPoller","Changes","messages","useContext","I18NContext","jsxs","Fragment","LocalizedMessageKey","showNames","showDurations","useUserPreferences","getLayout","layout","defaultLayout","getCompactLayout","jsx","StatusIcon","time","Total","PipelineGraph","startPollingRunsStatus","pathPrefix","onFetchSuccess","onFetchError","interval","path","fetchPipelineData","result","err","MultiPipelineGraph","runs","setRuns","useState","poll","setPoll","useEffect","locale","useLocale","groupedRuns","acc","date","runsOnDate","Checkbox","label","value","setValue","id","useId","e","OverflowDropdown","buttonPortal","setShowNames","setShowDurations","canConfigure","useUserPermissions","useMessages","DropdownPortal","Dropdown","SETTINGS","SettingsButton","App","settings","overflow","LocaleProvider","I18NProvider","ResourceBundleName","UserPreferencesProvider","UserPermissionsProvider","rootElement","root","createRoot"],"mappings":"4OAmBA,SAAwBA,EAAU,CAAE,IAAAC,EAAK,eAAAC,GAAkC,CACzE,KAAM,CAAE,IAAKC,CAAQ,EAAIC,EAAa,CACpC,eAAgBF,EAAiBD,EAAI,GAAK,GAAA,CAC3C,EAED,SAASI,GAAU,CACX,MAAAC,EAAWC,aAAWC,CAAW,EAEnC,GAAAP,EAAI,eAAiB,EAGzB,OAEKQ,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAA,MACAJ,EAAS,OAAOK,EAAoB,eAAgB,CACnD,EAAGV,EAAI,YACR,CAAA,CAAA,EACH,CAAA,CAIJ,KAAM,CAAE,UAAAW,EAAW,cAAAC,CAAc,EAAIC,EAAmB,EAExD,SAASC,GAAY,CACb,MAAAC,EAAqB,CAAE,GAAGC,CAAc,EAE1C,MAAA,CAACL,GAAa,CAACC,EACjBG,EAAO,aAAe,GAEtBA,EAAO,aAAe,GAGjBA,CAAA,CAGT,SAASE,GAAmB,CAC1B,MAAO,CAACN,GAAa,CAACC,EAAgB,0BAA4B,EAAA,CAGpE,cACG,MAAI,CAAA,UAAW,kBAAkBK,EAAA,CAAkB,GAClD,SAAA,CAACC,EAAAA,IAAA,MAAA,CACC,gBAAC,IAAE,CAAA,KAAMjB,EAAiBD,EAAI,GAAI,UAAU,0BAC1C,SAAA,CAACkB,EAAAA,IAAAC,EAAA,CAAW,OAAQnB,EAAI,MAAQ,CAAA,EAC/BA,EAAI,mBACJ,OACE,CAAA,SAAA,CAAAoB,EAAKpB,EAAI,SAAS,EAAE,MAAIkB,EAAAA,IAAAG,EAAA,CAAM,GAAIrB,EAAI,QAAU,CAAA,QAChDI,EAAQ,CAAA,CAAA,CAAA,CACX,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACAc,MAACI,GAAc,OAAQpB,EAAQ,OAAQ,OAAQY,EAAA,EAAa,UAAS,EAAC,CAAA,CAAA,EACxE,CAEJ,CCnEA,SAAwBS,EACtBC,EACAC,EACAC,EACAC,EAAW,IACX,CACA,MAAMC,EAAOJ,EAAa,4BAE1B,eAAeK,GAAoB,CAC7B,GAAA,CAEI,MAAAC,EAAS,MADH,MAAM,MAAMF,CAAI,GACH,KAAK,EAC9BH,EAAeK,EAAO,IAAI,QACnBC,EAAK,CAEZL,EAAaK,CAAG,CAAA,QAChB,CACW,WAAA,IAAMF,EAAkB,EAAGF,CAAQ,CAAA,CAChD,CAEgBE,EAAA,CACpB,CChBO,MAAMG,EAAqB,IAAM,CACtC,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAAyB,CAAA,CAAE,EAC7C,CAACC,EAAMC,CAAO,EAAIF,EAAAA,SAAS,EAAK,EAGhClC,EADc,SAAS,eAAe,wBAAwB,EAChC,QAAQ,eAE5CqC,EAAAA,UAAU,IAAM,CACTF,IACHC,EAAQ,EAAI,EACWd,EAAAtB,EAAgBiC,EAAUH,GAAQ,CACvD,QAAQ,IAAIA,CAAG,CAAA,CAChB,EAEF,EAAA,CAAC9B,EAAgBgC,EAAMG,CAAI,CAAC,EAE/B,MAAMG,EAASC,EAAU,EAEnBC,EAAyCR,EAAK,OAClD,CAACS,EAAgC1C,IAAQ,CACvC,MAAM2C,EAAO,IAAI,KAAK3C,EAAI,SAAS,EAAE,mBAAmBuC,EAAQ,CAC9D,KAAM,UACN,MAAO,OACP,IAAK,SAAA,CACN,EAEG,OAACG,EAAIC,CAAI,IACPD,EAAAC,CAAI,EAAI,CAAC,GAEXD,EAAAC,CAAI,EAAE,KAAK3C,CAAG,EAEX0C,CACT,EACA,CAAA,CACF,EAEMrC,EAAWC,aAAWC,CAAW,EAEvC,OAEKW,EAAA,IAAAT,EAAA,SAAA,CAAA,SAAA,OAAO,KAAKgC,CAAW,EAAE,SAAW,EAClCvB,EAAA,IAAA,MAAA,CAAI,UAAU,oBACb,SAAAA,EAAAA,IAAC,MAAI,CAAA,UAAU,sBACZ,SAASb,EAAA,OAAOK,EAAoB,QAAQ,EAC/C,CACF,CAAA,EAEA,OAAO,QAAQ+B,CAAW,EAAE,IAAI,CAAC,CAACE,EAAMC,CAAU,IAC/CpC,EAAAA,KAAA,MAAA,CAAI,UAAW,oBACd,SAAA,CAACU,EAAA,IAAA,IAAA,CAAE,UAAU,sBAAuB,SAAKyB,EAAA,EACxCC,EAAW,IAAK5C,GACfkB,EAAA,IAACnB,EAAA,CAEC,IAAAC,EACA,eAAAC,CAAA,EAFKD,EAAI,EAIZ,CAAA,CAAA,GARuC2C,CAS1C,CACD,EAEL,CAEJ,ECvEA,SAAwBE,EAAS,CAC/B,MAAAC,EACA,MAAAC,EACA,SAAAC,CACF,EAIG,CACD,MAAMC,EAAKC,EAAAA,MAAM,EAEf,OAAA1C,EAAA,KAAC,MAAI,CAAA,UAAU,mBACb,SAAA,CAAAU,EAAA,IAAC,QAAA,CACC,KAAK,WACL,GAAA+B,EACA,KAAMA,EACN,QAASF,EACT,SAAWI,GAAMH,EAASG,EAAE,OAAO,OAAO,CAAA,CAC5C,EACCjC,EAAA,IAAA,QAAA,CAAM,QAAS+B,EAAK,SAAMH,CAAA,CAAA,CAAA,EAC7B,CAEJ,CCZA,SAAwBM,EAAiB,CACvC,aAAAC,CACF,EAA0B,CACxB,KAAM,CAAE,UAAA1C,EAAW,aAAA2C,EAAc,cAAA1C,EAAe,iBAAA2C,CAAA,EAC9C1C,EAAmB,EACf,CAAE,aAAA2C,CAAa,EAAIC,EAAmB,EACtCpD,EAAWqD,EAAY,EAE3B,OAAAxC,EAAAA,IAACyC,EAAe,CAAA,UAAWN,EACzB,SAAAnC,EAAA,IAAC0C,EAAA,CACC,UAAW,uBACX,MAAO,CACLpD,EAAAA,KAAC,MAAI,CAAA,UAAW,0BACd,SAAA,CAAAU,EAAA,IAAC2B,EAAA,CACC,MAAOxC,EAAS,OAAOK,EAAoB,SAAS,EACpD,MAAOC,EACP,SAAU2C,CAAA,CACZ,EACApC,EAAA,IAAC2B,EAAA,CACC,MAAOxC,EAAS,OAAOK,EAAoB,YAAY,EACvD,MAAOE,EACP,SAAU2C,CAAA,CAAA,CACZ,CAAA,EAV8C,kBAWhD,EACAC,EAAe,YAAgBtC,MAAAT,EAAAA,SAAA,CAAA,CAAA,EAC/B+C,EACE,CACE,KAAM,YACN,KAAMK,EACN,KAAM,cAAA,EAGN3C,EAAAA,IAAAT,EAAAA,SAAA,CAAA,CAAA,CAAA,CAEN,CAAA,EAEJ,CAEJ,CClCwB,SAAAqD,EAAe,CAAE,aAAAT,GAAqC,CAC5E,MAAMhD,EAAWqD,EAAY,EACvB,CAAE,UAAA/C,EAAW,aAAA2C,EAAc,cAAA1C,EAAe,iBAAA2C,CAAA,EAC9C1C,EAAmB,EAErB,OAEIK,EAAA,IAAAT,WAAA,CAAA,SAAAS,EAAAA,IAACyC,EAAe,CAAA,UAAWN,EACzB,SAAAnC,EAAA,IAAC0C,EAAA,CACC,QAASvD,EAAS,OAAOK,EAAoB,QAAQ,EACrD,KAAMmD,EACN,UAAW,uBACX,MAAO,CACLrD,EAAAA,KAAC,MAAI,CAAA,UAAW,0BACd,SAAA,CAAAU,EAAA,IAAC2B,EAAA,CACC,MAAOxC,EAAS,OAAOK,EAAoB,SAAS,EACpD,MAAOC,EACP,SAAU2C,CAAA,CACZ,EACApC,EAAA,IAAC2B,EAAA,CACC,MAAOxC,EAAS,OAAOK,EAAoB,YAAY,EACvD,MAAOE,EACP,SAAU2C,CAAA,CAAA,CACZ,CAAA,EAV8C,kBAWhD,CAAA,CACF,GAEJ,CACF,CAAA,CAEJ,CC9BA,MAAMQ,EAAyB,IAAM,CACnC,MAAMxB,EAAS,SAAS,eAAe,wBAAwB,EAAG,QAC/D,WACGyB,EAAW,SAAS,eAAe,cAAc,EACjDC,EAAW,SAAS,eAAe,iCAAiC,EACtE,GAAA,CAACD,GAAY,CAACC,EACV,MAAA,IAAI,MAAM,gDAAgD,EAElE,GAAID,GAAYC,EACd,MAAM,IAAI,MACR,gEACF,EAEF,OACG/C,EAAA,IAAA,MAAA,CACC,SAACA,EAAA,IAAAgD,EAAA,CAAe,OAAA3B,EACd,SAAArB,EAAA,IAACiD,EAAa,CAAA,QAAS,CAACC,EAAmB,QAAQ,EACjD,gBAACC,EACE,CAAA,SAAA,CAAYL,GAAA9C,EAAAA,IAAC4C,EAAe,CAAA,aAAcE,CAAU,CAAA,EACpDC,GACE/C,EAAA,IAAAoD,EAAA,CACC,eAAClB,EAAiB,CAAA,aAAca,CAAU,CAAA,EAC5C,QAEDjC,EAAmB,CAAA,CAAA,CAAA,EACtB,CAAA,CACF,CACF,CAAA,EACF,CAEJ,EC1CMuC,EAAc,SAAS,eAAe,wBAAwB,EACpE,GAAI,CAACA,EACG,MAAA,IAAI,MAAM,qDAAqD,EAEvE,MAAMC,EAAOC,aAAWF,CAAW,EAGnCC,EAAK,OAAQtD,EAAAA,IAAA6C,EAAA,CAAI,CAAA,CAAE"}